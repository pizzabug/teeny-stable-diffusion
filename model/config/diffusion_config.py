from dataclasses import dataclass
from typing import List, Any, TypeVar, Callable, Type, cast

from utils.typing import from_str, to_class, from_stringified_bool

@dataclass
class DiffusionConfig:
    """
        Configuration for UNet2DConditionModel.
        Generated by Quicktype.
    """

    pretrained_model_name_or_path: str = "weights"
    completed_model_path: str = "output"
    revision: str = None

    # Config file directories
    config_vae: str = "config/vae.json"
    config_unet: str = "config/unet.json"
    config_scheduler: str = "config/scheduler.json"

    # Train flags
    train_vae: bool = False
    train_unet: bool = True
    train_text_encoder: bool = False

    @staticmethod
    def from_dict(obj: Any) -> 'DiffusionConfig':
        assert isinstance(obj, dict)
        pretrained_model_name_or_path = from_str(obj.get("pretrained_model_name_or_path"))
        completed_model_path = from_str(obj.get("completed_model_path"))
        revision = from_str(obj.get("revision"))
        config_vae = from_str(obj.get("config_vae"))
        config_unet = from_str(obj.get("config_unet"))
        config_scheduler = from_str(obj.get("config_scheduler"))
        train_vae = from_stringified_bool(from_str(obj.get("train_vae")))
        train_unet = from_stringified_bool(from_str(obj.get("train_unet")))
        train_text_encoder = from_stringified_bool(from_str(obj.get("train_text_encoder")))
        return DiffusionConfig(pretrained_model_name_or_path, completed_model_path, revision, config_vae, config_unet, config_scheduler, train_vae, train_unet, train_text_encoder)

    def to_dict(self) -> dict:
        result: dict = {}
        result["pretrained_model_name_or_path"] = from_str(self.pretrained_model_name_or_path)
        result["completed_model_path"] = from_str(self.completed_model_path)
        result["revision"] = from_str(self.revision)
        result["config_vae"] = from_str(self.config_vae)
        result["config_unet"] = from_str(self.config_unet)
        result["config_scheduler"] = from_str(self.config_scheduler)
        result["train_vae"] = from_str(str(self.train_vae).lower())
        result["train_unet"] = from_str(str(self.train_unet).lower())
        result["train_text_encoder"] = from_str(str(self.train_text_encoder).lower())
        return result


def diffusion_config_from_dict(s: Any) -> DiffusionConfig:
    return DiffusionConfig.from_dict(s)


def diffusion_config_to_dict(x: DiffusionConfig) -> Any:
    return to_class(DiffusionConfig, x)
